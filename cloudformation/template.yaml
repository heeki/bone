---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Deploys a Lambda Function for Image Processing
Outputs:
  SNSNotifications:
    Description: Subscribe to this topic to receive notifications coming from the WorkSpaces Deployment Framework
    Value: !Ref ImgProcTopic
  GroupSetupURL:
    Description: The URL to access the group setup form
    Value:
      "Fn::Join": [ "",
          [
            "https://",
            !Ref WspApiGateway,
            ".execute-api.",
            !Ref "AWS::Region",
            ".amazonaws.com/",
            !Ref StageEnvironmentName,
            "/forms/group_setup"
          ]
        ]
  ApproveDeleteURL:
    Description: The URL to approve a delete user action
    Value:
      "Fn::Join": [ "",
          [
            "https://",
            !Ref WspApiGateway,
            ".execute-api.",
            !Ref "AWS::Region",
            ".amazonaws.com/",
            !Ref StageEnvironmentName,
            "/delete/approved/username"
          ]
        ]
  ImportWorkspacesURL:
    Description: The URL to import existing Workspaces into this tool
    Value:
      "Fn::Join": [ "",
          [
            "https://",
            !Ref WspApiGateway,
            ".execute-api.",
            !Ref "AWS::Region",
            ".amazonaws.com/",
            !Ref StageEnvironmentName,
            "/forms/batch_import"
          ]
        ]
Parameters:
  LambdaFunctionName:
    Type: String
    Description: Enter the name of the Lambda function that will be created.
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[-_ a-zA-Z0-9]*"
    Default: WspProcessor
  S3BucketName:
    Type: String
    Description: Enter the name of the bucket where the lambda code zip file is located.
    Default: wsp-serverless-code
  S3LambdaZipFile:
    Type: String
    Description: Enter the key/filename for the Lambda code zip file.  e.g. foldername/wsp-lambda.zip
    Default: workspaces-lambda-code.zip
  SQSQueueName:
    Type: String
    Description: Enter the name of the SQS queue used to hold workspaces create/delete requests
    Default: WSP_Provisioning
  StageEnvironmentName:
    AllowedValues:
    - dev
    - qa
    - prod
    - test
    - sample
    - tools
    ConstraintDescription: must be a valid selection.
    Default: test
    Description: Stage environment name.
    Type: String
  WspTableName:
    Description: Name of the WorkSpaces tracking DynamoDB Table
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[-_ a-zA-Z0-9]*"
    Default: WSP_Mgmt
    ConstraintDescription: Must contain only valid characters for table names
  KeyTableName:
    Description: Name of the KMS key tracking DynamoDB Table
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[-_ a-zA-Z0-9]*"
    Default: WSP_Key
    ConstraintDescription: Must contain only valid characters for table names
  GrpTableName:
    Description: Name of the AD group mapping DynamoDB Table
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[-_ a-zA-Z0-9]*"
    Default: WSP_AD_Groups
    ConstraintDescription: Must contain only valid characters for table names
  LogLevel:
    Description: Lambda code logging level
    Type: String
    AllowedValues:
    - 10
    - 20
    - 30
    - 40
    - 50
    Default: 20
    ConstraintDescription: Must contain only numbers 10 through 50.  10 being most verbose, 50 least.
Resources:
  ImageProcessor:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3LambdaZipFile
      Description: Function to rekognize pictures
      FunctionName: !Ref LambdaFunctionName
      Handler: "lambda.lambda_handler"
      Role: !GetAtt ImgProcLambdaRole.Arn
      Runtime: "python2.7"
      Timeout: 120
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"
          LOG_LEVEL: !Ref LogLevel
          SNS_TOPIC: !Ref ImgProcTopic
          SNS_REGION: !Ref "AWS::Region"
  ImgProcTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: RekogniztionImageProcessor
 
  ImgProcLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ImgProcLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ImgProcLambdaPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "rekognition:*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
            - "sns:Publish"
            Resource:
            - "*"
          -
            Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource:
            - "*"
      Roles:
        -
          Ref: "ImgProcLambdaRole"